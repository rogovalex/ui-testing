import com.yandex.mobile.realty.testing.DeviceProviderParallelInstrumentTestTask
import com.yandex.mobile.realty.testing.GradleReportTask

plugins {
    id 'com.android.application'
    id 'de.undercouch.download'
    id 'kotlin-android'
    id 'kotlin-kapt'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.example.uitesting"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "com.example.uitesting.CustomTestRunner"

        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    testOptions {
        unitTests.includeAndroidResources = true
        animationsDisabled = true
        def baseReportDir = project.properties['test.reports.dir'] ?: "${project.buildDir}/reports"
        reportDir "$baseReportDir/espresso"
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

def testUtilsVersion = "1.3.0"
def okhttpVersion = "4.9.1"
def espresso = "3.3.0"
def allure = "2.1.2"
def uiautomator = "2.2.0"

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "androidx.core:core-ktx:1.5.0"
    implementation "androidx.appcompat:appcompat:1.3.0"
    implementation "com.google.android.material:material:1.3.0"
    implementation "androidx.constraintlayout:constraintlayout:2.0.4"

    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"

    implementation "androidx.recyclerview:recyclerview:1.1.0"

    def lifecycleVersion = "2.3.1"
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-process:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycleVersion"

    def daggerVersion = "2.33"
    implementation "com.google.dagger:dagger:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$daggerVersion"

    implementation "com.google.code.gson:gson:2.8.6"

    def retrofitVersion = "2.9.0"
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava:$retrofitVersion"

    implementation "io.reactivex:rxjava:1.3.8"
    implementation 'io.reactivex:rxandroid:1.2.1'

    //unit test dependencies
    testImplementation "junit:junit:4.+"

    //android test dependencies
    androidTestImplementation "androidx.test.uiautomator:uiautomator:$uiautomator"
    androidTestImplementation "io.qameta.allure:allure-kotlin-model:$allure"
    androidTestImplementation "io.qameta.allure:allure-kotlin-commons:$allure"
    androidTestImplementation "io.qameta.allure:allure-kotlin-junit4:$allure"
    androidTestImplementation "io.qameta.allure:allure-kotlin-android:$allure"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espresso"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espresso"
    androidTestImplementation "androidx.test.ext:junit:1.1.2"
    androidTestImplementation "androidx.test:runner:1.3.0"

    androidTestImplementation "com.jakewharton.espresso:okhttp3-idling-resource:1.0.0"

    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$okhttpVersion"
    androidTestImplementation "com.squareup.okhttp3:okhttp-tls:$okhttpVersion"
    androidTestUtil "androidx.test:orchestrator:$testUtilsVersion"
}

def applicationApk = new File(project.buildDir, "outputs/apk/debug/app-debug.apk")
def testsApk = new File(project.buildDir, 'outputs/apk/androidTest/debug/app-debug-androidTest.apk')
def testUtilsApk = new File(project.rootDir, "test-services-${testUtilsVersion}.apk")
def orchestratorApk = new File(project.rootDir, "orchestrator-${testUtilsVersion}.apk")
def projectScreenshotDir = new File(project.rootDir, "/app/src/androidTest/screenshots")
def deviceScreenshotDirPath = "/sdcard/realty_screenshots"
def reportDir = new File(android.testOptions.reportDir)

tasks.register('downloadTestUtils', Download) {
    src "https://dl.google.com/dl/android/maven2/androidx/test/services/test-services/${testUtilsVersion}/test-services-${testUtilsVersion}.apk"
    dest testUtilsApk
    overwrite false
}

tasks.register('downloadOrchestrator', Download) {
    src "https://dl.google.com/dl/android/maven2/androidx/test/orchestrator/${testUtilsVersion}/orchestrator-${testUtilsVersion}.apk"
    dest orchestratorApk
    overwrite false
}

tasks.register('copyTestScreenshotsFromDevice', Exec) {
    commandLine android.adbExecutable, 'pull', "$deviceScreenshotDirPath/.", projectScreenshotDir.path
}

tasks.register('copyTestScreenshotsToDevice', Exec) {
    commandLine android.adbExecutable, 'shell rm -rf', deviceScreenshotDirPath
    commandLine android.adbExecutable, 'push', "${projectScreenshotDir.path}/.", deviceScreenshotDirPath
}

tasks.register(
        "connectedParallelDebugAndroidTest",
        DeviceProviderParallelInstrumentTestTask,
        "com.example.uitesting.test",
        "com.example.uitesting.CustomTestRunner",
        applicationApk,
        testsApk,
        testUtilsApk,
        orchestratorApk,
        android.adbExecutable,
        reportDir,
        projectScreenshotDir
).configure {
    dependsOn assembleDebug, assembleDebugAndroidTest, downloadTestUtils, downloadOrchestrator
}

tasks.register(
        "connectedParallelDebugAndroidTestReport",
        GradleReportTask,
        reportDir
).configure {
    dependsOn connectedParallelDebugAndroidTest
}
